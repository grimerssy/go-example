// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	auth "github.com/grimerssy/go-example/pkg/auth"

	mock "github.com/stretchr/testify/mock"
)

// TokenManager is an autogenerated mock type for the tokenManager type
type TokenManager struct {
	mock.Mock
}

type TokenManager_Expecter struct {
	mock *mock.Mock
}

func (_m *TokenManager) EXPECT() *TokenManager_Expecter {
	return &TokenManager_Expecter{mock: &_m.Mock}
}

// DefaultClaims provides a mock function with given fields:
func (_m *TokenManager) DefaultClaims() auth.Claims {
	ret := _m.Called()

	var r0 auth.Claims
	if rf, ok := ret.Get(0).(func() auth.Claims); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(auth.Claims)
		}
	}

	return r0
}

// TokenManager_DefaultClaims_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DefaultClaims'
type TokenManager_DefaultClaims_Call struct {
	*mock.Call
}

// DefaultClaims is a helper method to define mock.On call
func (_e *TokenManager_Expecter) DefaultClaims() *TokenManager_DefaultClaims_Call {
	return &TokenManager_DefaultClaims_Call{Call: _e.mock.On("DefaultClaims")}
}

func (_c *TokenManager_DefaultClaims_Call) Run(run func()) *TokenManager_DefaultClaims_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TokenManager_DefaultClaims_Call) Return(_a0 auth.Claims) *TokenManager_DefaultClaims_Call {
	_c.Call.Return(_a0)
	return _c
}

// GenerateTokens provides a mock function with given fields: claims
func (_m *TokenManager) GenerateTokens(claims auth.Claims) (auth.Tokens, error) {
	ret := _m.Called(claims)

	var r0 auth.Tokens
	if rf, ok := ret.Get(0).(func(auth.Claims) auth.Tokens); ok {
		r0 = rf(claims)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(auth.Tokens)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(auth.Claims) error); ok {
		r1 = rf(claims)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenManager_GenerateTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateTokens'
type TokenManager_GenerateTokens_Call struct {
	*mock.Call
}

// GenerateTokens is a helper method to define mock.On call
//  - claims auth.Claims
func (_e *TokenManager_Expecter) GenerateTokens(claims interface{}) *TokenManager_GenerateTokens_Call {
	return &TokenManager_GenerateTokens_Call{Call: _e.mock.On("GenerateTokens", claims)}
}

func (_c *TokenManager_GenerateTokens_Call) Run(run func(claims auth.Claims)) *TokenManager_GenerateTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(auth.Claims))
	})
	return _c
}

func (_c *TokenManager_GenerateTokens_Call) Return(_a0 auth.Tokens, _a1 error) *TokenManager_GenerateTokens_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ParseTokens provides a mock function with given fields: tokens, claims
func (_m *TokenManager) ParseTokens(tokens auth.Tokens, claims auth.Claims) (auth.Claims, error) {
	ret := _m.Called(tokens, claims)

	var r0 auth.Claims
	if rf, ok := ret.Get(0).(func(auth.Tokens, auth.Claims) auth.Claims); ok {
		r0 = rf(tokens, claims)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(auth.Claims)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(auth.Tokens, auth.Claims) error); ok {
		r1 = rf(tokens, claims)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenManager_ParseTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseTokens'
type TokenManager_ParseTokens_Call struct {
	*mock.Call
}

// ParseTokens is a helper method to define mock.On call
//  - tokens auth.Tokens
//  - claims auth.Claims
func (_e *TokenManager_Expecter) ParseTokens(tokens interface{}, claims interface{}) *TokenManager_ParseTokens_Call {
	return &TokenManager_ParseTokens_Call{Call: _e.mock.On("ParseTokens", tokens, claims)}
}

func (_c *TokenManager_ParseTokens_Call) Run(run func(tokens auth.Tokens, claims auth.Claims)) *TokenManager_ParseTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(auth.Tokens), args[1].(auth.Claims))
	})
	return _c
}

func (_c *TokenManager_ParseTokens_Call) Return(_a0 auth.Claims, _a1 error) *TokenManager_ParseTokens_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type NewTokenManagerT interface {
	mock.TestingT
	Cleanup(func())
}

// NewTokenManager creates a new instance of TokenManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTokenManager(t NewTokenManagerT) *TokenManager {
	mock := &TokenManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
