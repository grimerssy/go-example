// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/grimerssy/go-example/internal/core"
	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

type UserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepository) EXPECT() *UserRepository_Expecter {
	return &UserRepository_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *UserRepository) CreateUser(ctx context.Context, user *core.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *core.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepository_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UserRepository_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//  - ctx context.Context
//  - user *core.User
func (_e *UserRepository_Expecter) CreateUser(ctx interface{}, user interface{}) *UserRepository_CreateUser_Call {
	return &UserRepository_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, user)}
}

func (_c *UserRepository_CreateUser_Call) Run(run func(ctx context.Context, user *core.User)) *UserRepository_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*core.User))
	})
	return _c
}

func (_c *UserRepository_CreateUser_Call) Return(_a0 error) *UserRepository_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetUserById provides a mock function with given fields: ctx, id
func (_m *UserRepository) GetUserById(ctx context.Context, id int64) (*core.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *core.User
	if rf, ok := ret.Get(0).(func(context.Context, int64) *core.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_GetUserById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserById'
type UserRepository_GetUserById_Call struct {
	*mock.Call
}

// GetUserById is a helper method to define mock.On call
//  - ctx context.Context
//  - id int64
func (_e *UserRepository_Expecter) GetUserById(ctx interface{}, id interface{}) *UserRepository_GetUserById_Call {
	return &UserRepository_GetUserById_Call{Call: _e.mock.On("GetUserById", ctx, id)}
}

func (_c *UserRepository_GetUserById_Call) Run(run func(ctx context.Context, id int64)) *UserRepository_GetUserById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *UserRepository_GetUserById_Call) Return(_a0 *core.User, _a1 error) *UserRepository_GetUserById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetUserByName provides a mock function with given fields: ctx, name
func (_m *UserRepository) GetUserByName(ctx context.Context, name string) (*core.User, error) {
	ret := _m.Called(ctx, name)

	var r0 *core.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *core.User); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_GetUserByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByName'
type UserRepository_GetUserByName_Call struct {
	*mock.Call
}

// GetUserByName is a helper method to define mock.On call
//  - ctx context.Context
//  - name string
func (_e *UserRepository_Expecter) GetUserByName(ctx interface{}, name interface{}) *UserRepository_GetUserByName_Call {
	return &UserRepository_GetUserByName_Call{Call: _e.mock.On("GetUserByName", ctx, name)}
}

func (_c *UserRepository_GetUserByName_Call) Run(run func(ctx context.Context, name string)) *UserRepository_GetUserByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserRepository_GetUserByName_Call) Return(_a0 *core.User, _a1 error) *UserRepository_GetUserByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateUserCount provides a mock function with given fields: ctx, user
func (_m *UserRepository) UpdateUserCount(ctx context.Context, user *core.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *core.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepository_UpdateUserCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserCount'
type UserRepository_UpdateUserCount_Call struct {
	*mock.Call
}

// UpdateUserCount is a helper method to define mock.On call
//  - ctx context.Context
//  - user *core.User
func (_e *UserRepository_Expecter) UpdateUserCount(ctx interface{}, user interface{}) *UserRepository_UpdateUserCount_Call {
	return &UserRepository_UpdateUserCount_Call{Call: _e.mock.On("UpdateUserCount", ctx, user)}
}

func (_c *UserRepository_UpdateUserCount_Call) Run(run func(ctx context.Context, user *core.User)) *UserRepository_UpdateUserCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*core.User))
	})
	return _c
}

func (_c *UserRepository_UpdateUserCount_Call) Return(_a0 error) *UserRepository_UpdateUserCount_Call {
	_c.Call.Return(_a0)
	return _c
}

type NewUserRepositoryT interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepository(t NewUserRepositoryT) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
