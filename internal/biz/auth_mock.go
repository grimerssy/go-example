// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go

// Package biz is a generated GoMock package.
package biz

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	core "github.com/grimerssy/go-example/internal/core"
	auth "github.com/grimerssy/go-example/pkg/auth"
)

// tokenManagerMock is a mock of TokenManager interface.
type tokenManagerMock struct {
	ctrl     *gomock.Controller
	recorder *tokenManagerMockMockRecorder
}

// tokenManagerMockMockRecorder is the mock recorder for tokenManagerMock.
type tokenManagerMockMockRecorder struct {
	mock *tokenManagerMock
}

// NewtokenManagerMock creates a new mock instance.
func NewtokenManagerMock(ctrl *gomock.Controller) *tokenManagerMock {
	mock := &tokenManagerMock{ctrl: ctrl}
	mock.recorder = &tokenManagerMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *tokenManagerMock) EXPECT() *tokenManagerMockMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *tokenManagerMock) GenerateToken(claims map[string]string) (auth.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", claims)
	ret0, _ := ret[0].(auth.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *tokenManagerMockMockRecorder) GenerateToken(claims interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*tokenManagerMock)(nil).GenerateToken), claims)
}

// ParseToken mocks base method.
func (m *tokenManagerMock) ParseToken(token auth.AccessToken) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *tokenManagerMockMockRecorder) ParseToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*tokenManagerMock)(nil).ParseToken), token)
}

// idObfuscatorMock is a mock of IdObfuscator interface.
type idObfuscatorMock struct {
	ctrl     *gomock.Controller
	recorder *idObfuscatorMockMockRecorder
}

// idObfuscatorMockMockRecorder is the mock recorder for idObfuscatorMock.
type idObfuscatorMockMockRecorder struct {
	mock *idObfuscatorMock
}

// NewidObfuscatorMock creates a new mock instance.
func NewidObfuscatorMock(ctrl *gomock.Controller) *idObfuscatorMock {
	mock := &idObfuscatorMock{ctrl: ctrl}
	mock.recorder = &idObfuscatorMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *idObfuscatorMock) EXPECT() *idObfuscatorMockMockRecorder {
	return m.recorder
}

// DeobfuscateId mocks base method.
func (m *idObfuscatorMock) DeobfuscateId(obfuscated int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeobfuscateId", obfuscated)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeobfuscateId indicates an expected call of DeobfuscateId.
func (mr *idObfuscatorMockMockRecorder) DeobfuscateId(obfuscated interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeobfuscateId", reflect.TypeOf((*idObfuscatorMock)(nil).DeobfuscateId), obfuscated)
}

// ObfuscateId mocks base method.
func (m *idObfuscatorMock) ObfuscateId(id int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObfuscateId", id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObfuscateId indicates an expected call of ObfuscateId.
func (mr *idObfuscatorMockMockRecorder) ObfuscateId(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObfuscateId", reflect.TypeOf((*idObfuscatorMock)(nil).ObfuscateId), id)
}

// passwordHasherMock is a mock of PasswordHasher interface.
type passwordHasherMock struct {
	ctrl     *gomock.Controller
	recorder *passwordHasherMockMockRecorder
}

// passwordHasherMockMockRecorder is the mock recorder for passwordHasherMock.
type passwordHasherMockMockRecorder struct {
	mock *passwordHasherMock
}

// NewpasswordHasherMock creates a new mock instance.
func NewpasswordHasherMock(ctrl *gomock.Controller) *passwordHasherMock {
	mock := &passwordHasherMock{ctrl: ctrl}
	mock.recorder = &passwordHasherMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *passwordHasherMock) EXPECT() *passwordHasherMockMockRecorder {
	return m.recorder
}

// HashPassword mocks base method.
func (m *passwordHasherMock) HashPassword(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *passwordHasherMockMockRecorder) HashPassword(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*passwordHasherMock)(nil).HashPassword), password)
}

// IsPasswordEqualToHash mocks base method.
func (m *passwordHasherMock) IsPasswordEqualToHash(password, hash string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPasswordEqualToHash", password, hash)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPasswordEqualToHash indicates an expected call of IsPasswordEqualToHash.
func (mr *passwordHasherMockMockRecorder) IsPasswordEqualToHash(password, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPasswordEqualToHash", reflect.TypeOf((*passwordHasherMock)(nil).IsPasswordEqualToHash), password, hash)
}

// authUserRepositoryMock is a mock of AuthUserRepository interface.
type authUserRepositoryMock struct {
	ctrl     *gomock.Controller
	recorder *authUserRepositoryMockMockRecorder
}

// authUserRepositoryMockMockRecorder is the mock recorder for authUserRepositoryMock.
type authUserRepositoryMockMockRecorder struct {
	mock *authUserRepositoryMock
}

// NewauthUserRepositoryMock creates a new mock instance.
func NewauthUserRepositoryMock(ctrl *gomock.Controller) *authUserRepositoryMock {
	mock := &authUserRepositoryMock{ctrl: ctrl}
	mock.recorder = &authUserRepositoryMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *authUserRepositoryMock) EXPECT() *authUserRepositoryMockMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *authUserRepositoryMock) CreateUser(ctx context.Context, user *core.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *authUserRepositoryMockMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*authUserRepositoryMock)(nil).CreateUser), ctx, user)
}

// GetUserByName mocks base method.
func (m *authUserRepositoryMock) GetUserByName(ctx context.Context, name string) (*core.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByName", ctx, name)
	ret0, _ := ret[0].(*core.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByName indicates an expected call of GetUserByName.
func (mr *authUserRepositoryMockMockRecorder) GetUserByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByName", reflect.TypeOf((*authUserRepositoryMock)(nil).GetUserByName), ctx, name)
}
