// Code generated by MockGen. DO NOT EDIT.
// Source: logger.go

// Package log is a generated GoMock package.
package log

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	log "github.com/grimerssy/go-example/pkg/log"
)

// loggerrMock is a mock of Logger interface.
type loggerrMock struct {
	ctrl     *gomock.Controller
	recorder *loggerrMockMockRecorder
}

// loggerrMockMockRecorder is the mock recorder for loggerrMock.
type loggerrMockMockRecorder struct {
	mock *loggerrMock
}

// NewloggerrMock creates a new mock instance.
func NewloggerrMock(ctrl *gomock.Controller) *loggerrMock {
	mock := &loggerrMock{ctrl: ctrl}
	mock.recorder = &loggerrMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *loggerrMock) EXPECT() *loggerrMockMockRecorder {
	return m.recorder
}

// Log mocks base method.
func (m *loggerrMock) Log(lvl log.Level, msg string, fields ...log.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{lvl, msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Log", varargs...)
}

// Log indicates an expected call of Log.
func (mr *loggerrMockMockRecorder) Log(lvl, msg interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{lvl, msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*loggerrMock)(nil).Log), varargs...)
}

// WithDuration mocks base method.
func (m *loggerrMock) WithDuration(key string, val time.Duration) log.Field {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithDuration", key, val)
	ret0, _ := ret[0].(log.Field)
	return ret0
}

// WithDuration indicates an expected call of WithDuration.
func (mr *loggerrMockMockRecorder) WithDuration(key, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithDuration", reflect.TypeOf((*loggerrMock)(nil).WithDuration), key, val)
}

// WithString mocks base method.
func (m *loggerrMock) WithString(key, val string) log.Field {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithString", key, val)
	ret0, _ := ret[0].(log.Field)
	return ret0
}

// WithString indicates an expected call of WithString.
func (mr *loggerrMockMockRecorder) WithString(key, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithString", reflect.TypeOf((*loggerrMock)(nil).WithString), key, val)
}

// WithStrings mocks base method.
func (m *loggerrMock) WithStrings(key string, ss []string) log.Field {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithStrings", key, ss)
	ret0, _ := ret[0].(log.Field)
	return ret0
}

// WithStrings indicates an expected call of WithStrings.
func (mr *loggerrMockMockRecorder) WithStrings(key, ss interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithStrings", reflect.TypeOf((*loggerrMock)(nil).WithStrings), key, ss)
}
