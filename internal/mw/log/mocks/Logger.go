// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	log "github.com/grimerssy/go-example/pkg/log"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Logger is an autogenerated mock type for the Logger type
type Logger struct {
	mock.Mock
}

type Logger_Expecter struct {
	mock *mock.Mock
}

func (_m *Logger) EXPECT() *Logger_Expecter {
	return &Logger_Expecter{mock: &_m.Mock}
}

// Log provides a mock function with given fields: lvl, msg, fields
func (_m *Logger) Log(lvl log.Level, msg string, fields ...log.Field) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, lvl, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Logger_Log_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Log'
type Logger_Log_Call struct {
	*mock.Call
}

// Log is a helper method to define mock.On call
//  - lvl log.Level
//  - msg string
//  - fields ...log.Field
func (_e *Logger_Expecter) Log(lvl interface{}, msg interface{}, fields ...interface{}) *Logger_Log_Call {
	return &Logger_Log_Call{Call: _e.mock.On("Log",
		append([]interface{}{lvl, msg}, fields...)...)}
}

func (_c *Logger_Log_Call) Run(run func(lvl log.Level, msg string, fields ...log.Field)) *Logger_Log_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]log.Field, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(log.Field)
			}
		}
		run(args[0].(log.Level), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Log_Call) Return() *Logger_Log_Call {
	_c.Call.Return()
	return _c
}

// WithDuration provides a mock function with given fields: key, val
func (_m *Logger) WithDuration(key string, val time.Duration) log.Field {
	ret := _m.Called(key, val)

	var r0 log.Field
	if rf, ok := ret.Get(0).(func(string, time.Duration) log.Field); ok {
		r0 = rf(key, val)
	} else {
		r0 = ret.Get(0).(log.Field)
	}

	return r0
}

// Logger_WithDuration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithDuration'
type Logger_WithDuration_Call struct {
	*mock.Call
}

// WithDuration is a helper method to define mock.On call
//  - key string
//  - val time.Duration
func (_e *Logger_Expecter) WithDuration(key interface{}, val interface{}) *Logger_WithDuration_Call {
	return &Logger_WithDuration_Call{Call: _e.mock.On("WithDuration", key, val)}
}

func (_c *Logger_WithDuration_Call) Run(run func(key string, val time.Duration)) *Logger_WithDuration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(time.Duration))
	})
	return _c
}

func (_c *Logger_WithDuration_Call) Return(_a0 log.Field) *Logger_WithDuration_Call {
	_c.Call.Return(_a0)
	return _c
}

// WithString provides a mock function with given fields: key, val
func (_m *Logger) WithString(key string, val string) log.Field {
	ret := _m.Called(key, val)

	var r0 log.Field
	if rf, ok := ret.Get(0).(func(string, string) log.Field); ok {
		r0 = rf(key, val)
	} else {
		r0 = ret.Get(0).(log.Field)
	}

	return r0
}

// Logger_WithString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithString'
type Logger_WithString_Call struct {
	*mock.Call
}

// WithString is a helper method to define mock.On call
//  - key string
//  - val string
func (_e *Logger_Expecter) WithString(key interface{}, val interface{}) *Logger_WithString_Call {
	return &Logger_WithString_Call{Call: _e.mock.On("WithString", key, val)}
}

func (_c *Logger_WithString_Call) Run(run func(key string, val string)) *Logger_WithString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Logger_WithString_Call) Return(_a0 log.Field) *Logger_WithString_Call {
	_c.Call.Return(_a0)
	return _c
}

// WithStrings provides a mock function with given fields: key, ss
func (_m *Logger) WithStrings(key string, ss []string) log.Field {
	ret := _m.Called(key, ss)

	var r0 log.Field
	if rf, ok := ret.Get(0).(func(string, []string) log.Field); ok {
		r0 = rf(key, ss)
	} else {
		r0 = ret.Get(0).(log.Field)
	}

	return r0
}

// Logger_WithStrings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithStrings'
type Logger_WithStrings_Call struct {
	*mock.Call
}

// WithStrings is a helper method to define mock.On call
//  - key string
//  - ss []string
func (_e *Logger_Expecter) WithStrings(key interface{}, ss interface{}) *Logger_WithStrings_Call {
	return &Logger_WithStrings_Call{Call: _e.mock.On("WithStrings", key, ss)}
}

func (_c *Logger_WithStrings_Call) Run(run func(key string, ss []string)) *Logger_WithStrings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]string))
	})
	return _c
}

func (_c *Logger_WithStrings_Call) Return(_a0 log.Field) *Logger_WithStrings_Call {
	_c.Call.Return(_a0)
	return _c
}

type NewLoggerT interface {
	mock.TestingT
	Cleanup(func())
}

// NewLogger creates a new instance of Logger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLogger(t NewLoggerT) *Logger {
	mock := &Logger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
