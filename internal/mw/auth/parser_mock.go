// Code generated by MockGen. DO NOT EDIT.
// Source: parser.go

// Package auth is a generated GoMock package.
package auth

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	auth "github.com/grimerssy/go-example/pkg/auth"
)

// tokenParserMock is a mock of TokenParser interface.
type tokenParserMock struct {
	ctrl     *gomock.Controller
	recorder *tokenParserMockMockRecorder
}

// tokenParserMockMockRecorder is the mock recorder for tokenParserMock.
type tokenParserMockMockRecorder struct {
	mock *tokenParserMock
}

// NewtokenParserMock creates a new mock instance.
func NewtokenParserMock(ctrl *gomock.Controller) *tokenParserMock {
	mock := &tokenParserMock{ctrl: ctrl}
	mock.recorder = &tokenParserMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *tokenParserMock) EXPECT() *tokenParserMockMockRecorder {
	return m.recorder
}

// GetUserId mocks base method.
func (m *tokenParserMock) GetUserId(ctx context.Context, tokens auth.AccessToken) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserId", ctx, tokens)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserId indicates an expected call of GetUserId.
func (mr *tokenParserMockMockRecorder) GetUserId(ctx, tokens interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserId", reflect.TypeOf((*tokenParserMock)(nil).GetUserId), ctx, tokens)
}
