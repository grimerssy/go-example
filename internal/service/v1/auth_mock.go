// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	core "github.com/grimerssy/go-example/internal/core"
	auth "github.com/grimerssy/go-example/pkg/auth"
)

// authUseCaseMock is a mock of AuthUseCase interface.
type authUseCaseMock struct {
	ctrl     *gomock.Controller
	recorder *authUseCaseMockMockRecorder
}

// authUseCaseMockMockRecorder is the mock recorder for authUseCaseMock.
type authUseCaseMockMockRecorder struct {
	mock *authUseCaseMock
}

// NewauthUseCaseMock creates a new mock instance.
func NewauthUseCaseMock(ctrl *gomock.Controller) *authUseCaseMock {
	mock := &authUseCaseMock{ctrl: ctrl}
	mock.recorder = &authUseCaseMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *authUseCaseMock) EXPECT() *authUseCaseMockMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *authUseCaseMock) Login(ctx context.Context, input *core.User) (auth.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, input)
	ret0, _ := ret[0].(auth.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *authUseCaseMockMockRecorder) Login(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*authUseCaseMock)(nil).Login), ctx, input)
}

// Signup mocks base method.
func (m *authUseCaseMock) Signup(ctx context.Context, user *core.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signup", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Signup indicates an expected call of Signup.
func (mr *authUseCaseMockMockRecorder) Signup(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signup", reflect.TypeOf((*authUseCaseMock)(nil).Signup), ctx, user)
}
