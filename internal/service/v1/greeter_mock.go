// Code generated by MockGen. DO NOT EDIT.
// Source: greeter.go

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// greeterUseCaseMock is a mock of GreeterUseCase interface.
type greeterUseCaseMock struct {
	ctrl     *gomock.Controller
	recorder *greeterUseCaseMockMockRecorder
}

// greeterUseCaseMockMockRecorder is the mock recorder for greeterUseCaseMock.
type greeterUseCaseMockMockRecorder struct {
	mock *greeterUseCaseMock
}

// NewgreeterUseCaseMock creates a new mock instance.
func NewgreeterUseCaseMock(ctrl *gomock.Controller) *greeterUseCaseMock {
	mock := &greeterUseCaseMock{ctrl: ctrl}
	mock.recorder = &greeterUseCaseMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *greeterUseCaseMock) EXPECT() *greeterUseCaseMockMockRecorder {
	return m.recorder
}

// Greet mocks base method.
func (m *greeterUseCaseMock) Greet(ctx context.Context, userId int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Greet", ctx, userId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Greet indicates an expected call of Greet.
func (mr *greeterUseCaseMockMockRecorder) Greet(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Greet", reflect.TypeOf((*greeterUseCaseMock)(nil).Greet), ctx, userId)
}
