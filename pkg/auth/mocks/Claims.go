// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Claims is an autogenerated mock type for the Claims type
type Claims struct {
	mock.Mock
}

type Claims_Expecter struct {
	mock *mock.Mock
}

func (_m *Claims) EXPECT() *Claims_Expecter {
	return &Claims_Expecter{mock: &_m.Mock}
}

// Valid provides a mock function with given fields:
func (_m *Claims) Valid() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Claims_Valid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Valid'
type Claims_Valid_Call struct {
	*mock.Call
}

// Valid is a helper method to define mock.On call
func (_e *Claims_Expecter) Valid() *Claims_Valid_Call {
	return &Claims_Valid_Call{Call: _e.mock.On("Valid")}
}

func (_c *Claims_Valid_Call) Run(run func()) *Claims_Valid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Claims_Valid_Call) Return(_a0 error) *Claims_Valid_Call {
	_c.Call.Return(_a0)
	return _c
}

type NewClaimsT interface {
	mock.TestingT
	Cleanup(func())
}

// NewClaims creates a new instance of Claims. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClaims(t NewClaimsT) *Claims {
	mock := &Claims{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
